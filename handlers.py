import os
import json
from datetime import datetime, timedelta
from telebot import types
from file_processing import process_excel_file, load_existing_data, save_data
from bot import bot

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
pending_users = {}

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    item2 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    item3 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
    markup.add(item1, item2, item3)
    return markup

def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_keyboard())

def handle_add_schedule(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.', reply_markup=create_main_keyboard())

def handle_show_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show"""
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', reply_markup=create_main_keyboard())
    pending_users[message.chat.id] = 'awaiting_teacher_name'

def handle_show_schedule(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'"""
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', reply_markup=create_main_keyboard())
    pending_users[message.chat.id] = 'awaiting_teacher_name'

@bot.message_handler(content_types=['text'])
def handle_text(message: types.Message):
    chat_id = message.chat.id
    if chat_id in pending_users and pending_users[chat_id] == 'awaiting_teacher_name':
        del pending_users[chat_id]
        process_teacher_input(message)

def process_teacher_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_name = message.text.strip()

    data = load_existing_data()
    if not data or not data.get("schedule_data"):
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.', reply_markup=create_main_keyboard())
        pending_users[message.chat.id] = 'awaiting_teacher_name'  # –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
    current_date = datetime.now()
    start_date = current_date - timedelta(days=14)  # -14 –¥–Ω–µ–π
    end_date = current_date + timedelta(days=28)    # +28 –¥–Ω–µ–π
    current_year = current_date.year

    teacher_entries = []
    search_name = teacher_name.lower()

    for item in data["schedule_data"]:
        teacher = item.get('teacher', '').lower()
        if not teacher:
            continue

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
        teacher_parts = teacher.split()
        teacher_clean = teacher_parts[-1] if teacher_parts else teacher
        if teacher.startswith('–¥–æ—Ü.') or teacher.startswith('—Å—Ç.–ø—Ä–µ–ø.'):
            teacher_clean = teacher_parts[1] if len(teacher_parts) > 1 else teacher_clean

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (search_name in teacher or 
            search_name in teacher_clean or
            any(search_name in part for part in teacher_parts)):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ DD.MM –≤ –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö 3 –ª–µ—Ç
            try:
                schedule_date_str = item['date']
                entry_added = False
                for year_offset in range(4):  # 2025, 2026, 2027, 2028
                    year = current_year + year_offset
                    schedule_date = datetime.strptime(schedule_date_str + f".{year}", '%d.%m.%Y')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                    if start_date <= schedule_date <= end_date:
                        item['sort_date'] = schedule_date
                        teacher_entries.append(item)
                        entry_added = True
                        break
                if not entry_added:
                    continue
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    if not teacher_entries:
        bot.send_message(message.chat.id, f'–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å "{teacher_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.', reply_markup=create_main_keyboard())
        pending_users[message.chat.id] = 'awaiting_teacher_name'  # –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
        return

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_entries = []
    seen = set()
    for entry in teacher_entries:
        entry_tuple = (entry['date'], entry['teacher'], entry['subject'], entry['time'], entry['audience'], entry.get('type', ''))
        if entry_tuple not in seen:
            seen.add(entry_tuple)
            unique_entries.append(entry)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
    unique_entries.sort(key=lambda x: x['sort_date'])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    TELEGRAM_MESSAGE_LIMIT = 4096
    schedule_messages = []
    current_message = ""

    for item in unique_entries:  # –£–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 –∑–∞–ø–∏—Å–µ–π
        schedule_info = (
            f"üìÖ –î–∞—Ç–∞: {item['date']}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {item['subject']}\n"
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {item['teacher']}\n"
            f"üîπ –¢–∏–ø: {item.get('type', '')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {item['time']}\n"
            f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {item['audience']}\n\n"
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç
        if len(current_message) + len(schedule_info) > TELEGRAM_MESSAGE_LIMIT:
            schedule_messages.append(current_message)
            current_message = schedule_info
        else:
            current_message += schedule_info

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if current_message:
        schedule_messages.append(current_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg in schedule_messages:
        bot.send_message(message.chat.id, msg, reply_markup=create_main_keyboard())

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–Ω–æ–≤–∞ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', reply_markup=create_main_keyboard())
    pending_users[message.chat.id] = 'awaiting_teacher_name'

def handle_document(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    file_name = message.document.file_name
    file_name_lower = file_name.lower()

    if not (file_name_lower.endswith('.xls') or file_name_lower.endswith('.xlsx')):
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls –∏–ª–∏ .xlsx)', reply_markup=create_main_keyboard())
        return

    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    result = process_excel_file(downloaded_file, file_name)

    if result["status"] == "error":
        bot.send_message(message.chat.id, f'‚ùå {result["message"]}', reply_markup=create_main_keyboard())
        return

    if result["new_entries_count"] == 0:
        bot.send_message(message.chat.id, '‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=create_main_keyboard())
    else:
        save_data(result["data"])
        report = f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        bot.send_message(message.chat.id, report, reply_markup=create_main_keyboard())

def handle_clear_schedule(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    file_path = 'data/schedule.json'
    if os.path.exists(file_path):
        os.remove(file_path)
        bot.reply_to(message, '‚úÖ –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=create_main_keyboard())
    else:
        bot.reply_to(message, '‚ÑπÔ∏è –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è)', reply_markup=create_main_keyboard())