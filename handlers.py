import os
import json
from telebot import types
from io import BytesIO
from file_processing import process_excel_file, load_existing_data, save_data
from bot import bot

def handle_start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    item2 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup.add(item1, item2)
    bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

def handle_add_schedule(message: types.Message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.')

def handle_show_schedule(message: types.Message):
    try:
        data = load_existing_data()
        
        if not data["schedule_data"]:
            bot.reply_to(message, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.')
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        for item in data["schedule_data"][:10]:
            schedule_info = (
                f"üìÖ –î–∞—Ç–∞: {item['date']}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {item['subject']}\n"
                f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {item['teacher']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {item['time']}\n"
                f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {item['audience']}\n"
            )
            bot.send_message(message.chat.id, schedule_info)
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = f"\nüìä –ü–æ–∫–∞–∑–∞–Ω–æ: 10 –∏–∑ {len(data['schedule_data'])}"
        bot.send_message(message.chat.id, stats)
        
    except Exception as e:
        print(f"Error showing schedule: {e}")
        bot.reply_to(message, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')

def handle_document(message: types.Message):
    try:
        file_name = message.document.file_name
        file_name_lower = file_name.lower()
        
        if not (file_name_lower.endswith('.xls') or file_name_lower.endswith('.xlsx')):
            bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls –∏–ª–∏ .xlsx)')
            return
            
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        result = process_excel_file(downloaded_file, file_name)
        
        if result["status"] == "error":
            bot.reply_to(message, f'‚ùå {result["message"]}')
            return
            
        if result["new_entries_count"] == 0:
            bot.reply_to(message, '‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            save_data(result["data"])
            report = f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            bot.reply_to(message, report)
            
    except Exception as e:
        print(f"Error handling document: {e}")
        bot.reply_to(message, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')